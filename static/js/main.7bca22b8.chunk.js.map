{"version":3,"sources":["api/getData.js","components/ModeSelection/ModeSelectionShape.js","components/ModeSelection/ModeSelection.jsx","components/Square/Square.jsx","components/Square/SquareShape.js","components/History/HistoryShape.js","components/History/History.jsx","App.jsx","index.jsx"],"names":["loadData","PropTypes","func","isRequired","a","fetch","response","result","json","ModeSelection","memo","setField","setOpenSquare","setHistoryHover","setLoadingError","useState","modes","setModes","disabledStatus","setDisabledStatus","useEffect","Object","entries","fetchData","handleSelect","useCallback","event","value","target","loadField","handleButton","numberOfCells","squares","i","push","id","uuidv4","className","onChange","map","mode","field","ClassName","type","onClick","disabled","Square","arrayOf","shape","number","string","point","historyHover","handleHover","place","dataset","coordinates","row","square","index","key","data-place","onMouseOver","onFocus","HistoryShape","History","propTypes","App","openSquare","loadingError","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7bca22b8.chunk.js","sourcesContent":["const BASE_URL = 'https://demo1030918.mockable.io/';\n\nexport const loadData = async() => {\n  const response = await fetch(BASE_URL);\n  const result = response.json();\n\n  return result;\n};\n","import PropTypes from 'prop-types';\n\nexport const ModeSelectionShape = {\n  setField: PropTypes.func.isRequired,\n  setOpenSquare: PropTypes.func.isRequired,\n  setHistoryHover: PropTypes.func.isRequired,\n  setLoadingError: PropTypes.func.isRequired,\n}.isRequired;\n","import React, { useState, useEffect, memo, useCallback } from 'react';\nimport './ModeSelection.scss';\nimport ClassName from 'classnames';\nimport { v4 as uuidv4 } from 'uuid';\nimport { ModeSelectionShape } from './ModeSelectionShape';\nimport { loadData } from '../../api/getData';\n\nexport const ModeSelection = memo(({\n  setField,\n  setOpenSquare,\n  setHistoryHover,\n  setLoadingError,\n}) => {\n  const [modes, setModes] = useState([]);\n  const [disabledStatus, setDisabledStatus] = useState(true);\n\n  useEffect(() => {\n    async function fetchData() {\n      try {\n        const response = await loadData();\n        const result = Object.entries(response);\n\n        setModes(result);\n      } catch {\n        setLoadingError(true);\n      }\n    }\n\n    fetchData();\n  }, []);\n\n  const handleSelect = useCallback((event) => {\n    const { value } = event.target;\n\n    value === 'Pick mode'\n      ? setDisabledStatus(true)\n      : setDisabledStatus(false);\n\n    setOpenSquare(false);\n    setHistoryHover([]);\n    loadField(value);\n  }, []);\n\n  const handleButton = useCallback(() => {\n    setOpenSquare(true);\n  }, []);\n\n  const loadField = useCallback((numberOfCells) => {\n    const squares = [];\n\n    for (let i = 1; i <= numberOfCells; i += 1) {\n      squares.push({\n        value: i,\n        id: uuidv4(),\n      });\n    }\n\n    setField(squares);\n  }, []);\n\n  return (\n    <form className=\"form\">\n      <select className=\"form__select\" onChange={handleSelect}>\n        <option>Pick mode</option>\n\n        {modes.map(mode => (\n          <option key={mode[0]} value={mode[1].field}>\n            {mode[0]}\n          </option>\n        ))}\n      </select>\n\n      <button\n        className={ClassName('form__button', {\n          'form__button--disabled': disabledStatus,\n        })}\n        type=\"button\"\n        onClick={handleButton}\n        disabled={disabledStatus}\n      >\n        START\n      </button>\n    </form>\n  );\n});\n\nModeSelection.propTypes = ModeSelectionShape;\n","import React, { memo, useCallback } from 'react';\nimport './Square.scss';\nimport { v4 as uuidv4 } from 'uuid';\nimport { SquareShape } from './SquareShape';\n\nexport const Square = memo(({ field, historyHover, setHistoryHover }) => {\n  const handleHover = useCallback((event) => {\n    const { place } = event.target.dataset;\n\n    if (event.type === 'focus') {\n      return;\n    }\n\n    const coordinates = {\n      point: place,\n      id: uuidv4(),\n    };\n\n    setHistoryHover([...historyHover, coordinates]);\n  }, [historyHover]);\n\n  return (\n    <div className=\"square\">\n      {field.map(row => (\n        <div key={row.id} className=\"square__row\">\n          {field.map((square, index) => {\n            const key = row.id + index;\n\n            return (\n              <button\n                className=\"square__item\"\n                key={key}\n                type=\"button\"\n                data-place={`row ${row.value} col ${square.value}`}\n                onMouseOver={handleHover}\n                onFocus={handleHover}\n              />\n            );\n          })}\n        </div>\n      ))}\n    </div>\n  );\n});\n\nSquare.propTypes = SquareShape;\n","import PropTypes from 'prop-types';\n\nexport const SquareShape = {\n  field: PropTypes.arrayOf(PropTypes.shape({\n    value: PropTypes.number.isRequired,\n    id: PropTypes.string.isRequired,\n  })).isRequired,\n  historyHover: PropTypes.arrayOf(PropTypes.shape({\n    point: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  })).isRequired,\n  setHistoryHover: PropTypes.func.isRequired,\n}.isRequired;\n","import PropTypes from 'prop-types';\n\nexport const HistoryShape = {\n  historyHover: PropTypes.arrayOf(PropTypes.shape({\n    point: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  })).isRequired,\n}.isRequired;\n","import React, { memo } from 'react';\nimport './History.scss';\nimport { HistoryShape } from './HistoryShape';\n\nexport const History = memo(({ historyHover }) => (\n  <div className=\"history\">\n    <h3 className=\"history__title\">History</h3>\n    {historyHover.map(({ point, id }) => (\n      <div key={id} className=\"history__item\">{point}</div>\n    ))}\n  </div>\n));\n\nHistory.propTypes = HistoryShape;\n","import React, { useState } from 'react';\nimport './App.scss';\nimport { ModeSelection } from './components/ModeSelection/ModeSelection';\nimport { Square } from './components/Square/Square';\nimport { History } from './components/History/History';\n\nexport const App = () => {\n  const [field, setField] = useState([]);\n  const [historyHover, setHistoryHover] = useState([]);\n  const [openSquare, setOpenSquare] = useState(false);\n  const [loadingError, setLoadingError] = useState(false);\n\n  return (\n    <div className=\"container\">\n      <ModeSelection\n        setField={setField}\n        setOpenSquare={setOpenSquare}\n        setHistoryHover={setHistoryHover}\n        setLoadingError={setLoadingError}\n      />\n\n      {loadingError && (\n        <div className=\"container__error\">\n          Failed to load data. Reload the page!\n        </div>\n      )}\n\n      {openSquare && (\n        <div className=\"container__main\">\n          <Square\n            field={field}\n            historyHover={historyHover}\n            setHistoryHover={setHistoryHover}\n          />\n\n          <History historyHover={historyHover} />\n        </div>\n      )}\n    </div>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { App } from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}